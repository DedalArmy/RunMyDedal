transformation dedalToSpringDSL(in dedal : DedalModel, out springdsl : SpringModel);

modeltype SpringModel "strict" uses springConfigDsl('http://www.xtext.org/spring/SpringConfigDsl');
modeltype DedalModel "strict" uses dedal('http://www.dedal.fr/metamodel');

main() {

	dedal.rootObjects()[dedal::DedalDiagram] ->map toSpringModel();

}

mapping DedalModel::DedalDiagram::toSpringModel() : SpringModel::SpringProject {
	configurations += self.architectureDescriptions->getConfiguration();
	
}

mapping DedalModel::Assembly::toSpringConfiguration() : SpringModel::Configuration {
	components := self.assmComponents-> map toSpringComp(self);
	
}

mapping DedalModel::CompInstance::toSpringComp(assm:DedalModel::Assembly) : SpringModel::Component {
	name := self.name;
	features +=assm.assemblyConnections->map toSpringFeature();
	if(self.instantiates.oclIsTypeOf(DedalModel::CompClass)){
		_class := self.map toCreationMethod();
	}
}

mapping DedalModel::CompInstance::toCreationMethod() : springConfigDsl::CreationMethod {
	_class := self.map toClass();
}

mapping DedalModel::CompInstance::toClass() : springConfigDsl::Class {
	classname := self.instantiates.name;
}

mapping DedalModel::InstConnection::toSpringFeature() : springConfigDsl::Feature {
	self.serverInstElem->forEach(f){
		if(f.oclIsTypeOf(DedalModel::CompInstance)){
			name:="\""+self._property.substituteAll("orchestrator1.","")+"\"";
		}
	}
}

//on recupere les configurations du spring project grace au truc dedal il 
query DedalModel::ArchitectureDescription::getConfiguration() : SpringModel::Configuration {
	var config : SpringModel::Configuration;
	if(self.oclIsTypeOf(DedalModel::Assembly)){
		config := self.oclAsType(DedalModel::Assembly).map toSpringConfiguration();	
	};
	return config;
}
