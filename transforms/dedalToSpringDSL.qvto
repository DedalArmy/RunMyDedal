transformation dedalToSpringDSL(in dedal : DedalModel, out springdsl : SpringModel);

modeltype SpringModel "strict" uses springConfigDsl('http://www.xtext.org/spring/SpringConfigDsl');
modeltype DedalModel "strict" uses dedal('http://www.dedal.fr/metamodel');

main() {

	dedal.rootObjects()[dedal::DedalDiagram] ->map toSpringModel();

}

mapping DedalModel::DedalDiagram::toSpringModel() : SpringModel::SpringProject {
	configurations += self.architectureDescriptions->getConfiguration();
	
}

mapping DedalModel::Assembly::toSpringConfiguration() : SpringModel::Configuration {
	components := self.assmComponents-> map toSpringComp(self);
	setReferences(components, self.assemblyConnections);
}

query setReferences(components:OrderedSet(SpringModel::Component),connections:OrderedSet(DedalModel::InstConnection)) : Void {
	components->forEach(c) {
		c.features+=connections->map toSpringFeature();
	};
	return null;
}

mapping DedalModel::CompInstance::toSpringComp(assm:DedalModel::Assembly) : SpringModel::Component {
	name := self.name;
//	features +=assm.assemblyConnections->map toSpringFeature();
	if(self.instantiates.oclIsTypeOf(DedalModel::CompClass)){
		_class := self.map toCreationMethod();
	}
}

mapping DedalModel::CompInstance::toCreationMethod() : springConfigDsl::CreationMethod {
	_class := self.map toClass();
}

mapping DedalModel::CompInstance::toClass() : springConfigDsl::Class {
	classname := self.instantiates.name;
}

mapping DedalModel::InstConnection::toSpringFeature() : springConfigDsl::Feature {
	self.serverInstElem->forEach(f){
		if(f.oclIsTypeOf(DedalModel::CompInstance)){
//			name:="\""+self._property.substituteAll("orchestrator1.","")+"\"";
			name := "\""+self._property.substring(self._property.lastIndexOf('.')+1, self._property.length())+"\"";
			var arte := resolveone(comp:SpringModel::Component | comp.name = f.name);
			artefact:= arte.clone();
			//config.getComponent(f.name);
		}
	}
}



mapping DedalModel::CompInstance::toSpringReference() : springConfigDsl::AbstractArtefact{
	
}

query SpringModel::Configuration::getComponent(name:String): SpringModel::Component {
	var comp : SpringModel::Component;
	self.components->forEach(c){
	if(name=c.name){
		comp := c;
		};
	};
	return comp;
}


//on recupere les configurations du spring project grace au truc dedal il 
query DedalModel::ArchitectureDescription::getConfiguration() : SpringModel::Configuration {
	var config : SpringModel::Configuration;
	if(self.oclIsTypeOf(DedalModel::Assembly)){
		config := self.oclAsType(DedalModel::Assembly).map toSpringConfiguration();	
	};
	return config;
}
