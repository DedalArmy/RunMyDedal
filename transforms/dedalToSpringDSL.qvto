transformation dedalToSpringDSL(in dedal : DedalModel, out springdsl : SpringModel);

modeltype SpringModel "strict" uses springConfigDsl('http://www.xtext.org/spring/SpringConfigDsl');
modeltype DedalModel "strict" uses dedal('http://www.dedal.fr/metamodel');

main() {

	dedal.rootObjects()[dedal::DedalDiagram] ->map toSpringModel();

}

mapping DedalModel::DedalDiagram::toSpringModel() : SpringModel::SpringProject {
	configurations += self.architectureDescriptions->getConfiguration();
	
}

mapping DedalModel::Assembly::toSpringConfiguration() : SpringModel::Configuration {
	components := self.assmComponents-> map toSpringComp(self);
	setReferences(components, self.assemblyConnections);
}

mapping DedalModel::CompInstance::toSpringComp(assm:DedalModel::Assembly) : SpringModel::Component {
	name := self.name;
	if(self.instantiates.oclIsTypeOf(DedalModel::CompClass)){
		_class := self.map toCreationMethod();
	}
}

mapping DedalModel::CompInstance::toCreationMethod() : springConfigDsl::CreationMethod {
	_class := self.map toClass();
}

mapping DedalModel::CompInstance::toClass() : springConfigDsl::Class {
	classname := self.instantiates.name;
}

mapping DedalModel::InstConnection::toSpringFeature() : springConfigDsl::Feature {
	name := "\""+self._property.substring(self._property.lastIndexOf('.')+1, self._property.length())+"\"";

	if(self._property.startsWith("set:")){
			artefact:= self.map toSet();
	}
	else if(self._property.startsWith("list:")){
			artefact:= self.map toList();
	}
	else{
		artefact:= self.map toReference();
	}
}

mapping DedalModel::InstConnection::toSet():SpringModel::sSet{
	artefacts+= self.map toReference();
}

mapping DedalModel::InstConnection::toList():SpringModel::sList{
	artefacts:= self.map toReference();
}

mapping DedalModel::InstConnection::toReference() : SpringModel::Reference {
	ref :=late resolveone(comp:SpringModel::Component | comp.name = self.serverInstElem.name);
}

//on recupere les configurations du spring project grace au truc dedal il 
query DedalModel::ArchitectureDescription::getConfiguration() : SpringModel::Configuration {
	var config : SpringModel::Configuration;
	if(self.oclIsTypeOf(DedalModel::Assembly)){
		config := self.oclAsType(DedalModel::Assembly).map toSpringConfiguration();	
	};
	return config;
}

query DedalModel::InstConnection::getSpringFeature(comp:SpringModel::Component): SpringModel::Feature{
	var feat : SpringModel::Feature;
	var found : Boolean;
	found := false;
	comp.features->forEach(f){
		if(f.name="\""+self._property.substring(self._property.lastIndexOf('.')+1, self._property.length())+"\""){
				found := true;
				feat := f;
				//feat.artefact:=self.map toReference(); //TODO vérifier set/list..., récupérer artefacts depuis artefac.oclAsType(SET/LIST)...
														// Ajouter la ref à artefacts
				if(feat.artefact.oclIsTypeOf(SpringModel::sSet)){
					feat.artefact.oclAsType(SpringModel::sSet).artefacts += self.map toReference();
				}else if(feat.artefact.oclIsTypeOf(SpringModel::sList)){
					feat.artefact.oclAsType(SpringModel::sList).artefacts += self.map toReference();
				}
		}
	};
	if(not found){
		feat:=self.map toSpringFeature();
	};
	return feat;
	
}

query setReferences(components:OrderedSet(SpringModel::Component),connections:OrderedSet(DedalModel::InstConnection)) : Void {
	components->forEach(c) {
		connections->forEach(connection) {
			if(connection.clientInstElem.name = c.name) {
				c.features+=connection.getSpringFeature(c);
			}
		}
	};
	return null;
}
